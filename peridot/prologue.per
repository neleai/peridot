class Lambda
  def call()
    {return ((obj_Lambda* )self)->lam( ((obj_Lambda* )self)->bnd);}
  end
end
class Fixint
	def +(obj_Fixint* b)
		{return Int(obj2int(self)+b->in);}
	end
	def -()
		{return Int(-obj2int(self));}
	end
	def *(obj_Fixint* b)
		{return Int(obj2int(self)*b->in);}
	end
	def /(obj_Fixint* b)
		{return Int(obj2int(self)/b->in);}
	end
  def %(obj_Fixint* b)
		{return Int(obj2int(self)%b->in);}
	end
  def **(obj_Fixint* b)
    {int i,p=1;
     for(i=0;i<obj2int(b);i++) p*=obj2int(self);
     return Int(p);
    }
  end
  def to_s()
    {char* c=(char*)malloc(20); sprintf(c,"%i",obj2int(self)); return Str(c);}
  end
  def times(obj_Lambda* l)
    { int i;for(i=0;i<((obj_Fixint* )self)->in;i++) _call_Lambda((obj) l);}
  end
end
class Array
	def  [](obj_Fixint* b)
  	{return obj2ary(self)[b->in];}
	end
	def []=(obj_Fixint* b,obj c)
  	{return obj2ary(self)[b->in]=c;}
	end
end
class String
  def +(obj_String* b)
    {char* s=malloc(strlen(obj2str(self))+strlen(b->ary)+1);strcpy(s,obj2str(self));strcat(s,b->ary);return Str(s); }
  end
  def *(obj_Fixint* b)
    { char *so=obj2str(self); /*do by binary expansion*/
      long i, n=obj2int(b), ss=strlen(so);
      char *s=malloc(n*ss);
      for(i=0;i<n;i++)
        strcpy(s+i*ss,so);
      return Str(s);
    }
  end
  def to_s()
    {return self;}
  end
end
class TopLevel
  def _puts(obj b)
    c=b.to_s
    {printf("%s\n",obj2str(c))}
  end
	def puti(obj_Fixint* b)
    _puts(b.to_s)
	end
  def geti()
    {int i;scanf("%i",&i);return Int(i);}
  end
  def eval(obj_String* s)
    {peridot_eval(s->ary)}
  end
end
class Class
  def to_s()
    {Str("new")}
  end
end
def _start()
	_puts(2*3+2*4)
  a=geti()
	b=a+3-3
	_puts(b*3-2/4)
	if(2){_puts(2)}
	c={Array()}
	c[2]=3
  z="abc"
  _puts(z+"def")
	_puts(c[2])
	_puts(c[2])
  l=(| c[2]=c[2]+1 |)
  3.times(l)
  l.call()
 	_puts(c[2])
  l.call()
	_puts(c[2])
  eval("class Fixint
def bar()
{return Int(42);}
end
end")
_puts(4.bar())
end
{main(){___start_Class(Toplevel());}}
