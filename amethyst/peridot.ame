class Peridot_parser < Amethyst
  def call(name,*args)
    Call[{:name=>leterize(name),:ary=>args}]
  end
end
amethyst Peridot_parser{
	root = (body | defi | sequence)*:a .* {a}
	
	body = "class" "" name:name defi*:ary "end" @Klass
	
	defi = "def" "" defname:name {["obj self"]}:args  '(' ( ')' break | {args=args+[','] if args.size==1} .:[args])*  sequence:[ary] "end" @Def
	name = <a-zA-Z_>:s <a-zA-Z0-9_>*:{s+it*""}
	defname = (<^ \t\r\n()>)*:x {leterize(x*"")}
	
	atom = ""
       ( number:n         -> CCode["Int(#{n})"]
       | '"' until('"'):s -> CCode["Str(#{s.inspect})"]
       | '(|' expr:e "|)" -> Lambda[e]
			 | '(' expr:e ")" {e}
			 | 'if' "(" expr:expr ")" block:block {If[{:expr=>expr,:block=>block}]}
			 | '{' ('}' break | &'{' atom:{'{'+it[0]+'}'}:[s] | .:[s])* {CCode[s*""]}
			 | method("self")
		   | local
			 )

  local =  ~'end' name:name @Var

	args = listOf('expr',',')
	method(obj) = name:name '(' (args | {[]}):arg ")" -> call(name,obj,*arg)
	
	expr_postfixed = atom:a ( 
                           ( '[' args:arg "]" "=" expr:arg2           -> call("[]=",a,*arg,arg2)
													 | '[' args:arg "]"                         -> call("[]",a,*arg)
													 | '.' method(a)
													 | '.' name:name                            -> call(name,a)
                           ):a
	                        )* {a}
               
  expr = expr_ass

  
  binary_op(exp,oper) = apply(exp):a ("" apply(oper):op apply(exp):b {call(op,a,b)}:a)* -> a 
  
  expr_ass = "" name:name '=' expr:expr @Assign
			     | expr_or_l
  
  expr_or_l  = binary_op('expr_and_l',(| "||" |))
  expr_and_l = binary_op('expr_cmp'  ,(| "&&" |))

  expr_cmp = binary_op('expr_ar1',(| "<" |"<="|"<=>"|">="|">" |"=="|"!=" |))
	expr_ar1 = expr_ar2:a (("+" expr_ar2
                         |"-" expr_ar2:{call('-',it)}):b {call('+',a,b)}:a   )* -> a
  expr_ar2 = binary_op('expr_or' ,(| '*' |'/' |'%'  |))
  expr_or  = binary_op('expr_and',(| '|' |'^'       |))
  expr_and = binary_op('expr_ar3',(| '&'            |))
  expr_ar3 = binary_op('expr_pfx',(| '**'|'<<'|'>>' |))

  prefix_op(oper,exp) = apply(oper):op apply(exp):e -> call(op,e)

  expr_pfx =             "+"    expr_pfx
           | prefix_op((|'-' |),'expr_pfx')
           | prefix_op((|<!~>|),'expr_pfx')
           | expr_postfixed  

	block = "{" sequence:s '}' {s}

	sequence = expr:[ary] ( newline expr:[ary])* @Seq
}
