amethyst Peridot_parser{
	root = defi*:a .* {a}
		
	defi = "def" "" name:name '(' ( ')' break | .:args[])*  sequence:ary[] "end" @Def
	name = (alpha |"_"):s alnum*:{s+it*""}
	
	atom = ""
       ( number
			 | '(' expr:e ')' {e}
			 | 'if' "(" expr:expr ")" block:block {If[{:expr=>expr,:block=>block}]}
			 | '{' ('}' break | .:s[])* {CCode[s*""]}
			 | name:name '(' expr:ary[] ')' @Call
 		   | name:name &{name!="end"} @Var
			 )

  expr = "" name:name '=' expr:expr @Assign
			 | addexpr

	addexpr = mulexpr:a (("+"|"-"):op mulexpr:b {Call[{:name=>leterize(op),:ary=>[a,b]}]}:a)* {a}
	mulexpr = atom:a (("*"|"/"):op atom:b {Call[{:name=>leterize(op),:ary=>[a,b]}]}:a)* {a}
	
	block = "{" sequence:s '}' {s}

	sequence = expr:ary[] ( newline expr:ary[])* @Seq
}
